# Global logging configuration
log4j.rootLogger=INFO,stdout,stu,
# MyBatis logging configuration...
#log4j.logger.org.mybatis.example.BlogMapper=TRACE
#也可以将日志从整个mapper接口级别调整到到语句级别，从而实现更细粒度的控制。如下配置只记录 selectBlog 语句的日志： 
#log4j.logger.org.mybatis.example.BlogMapper.selectBlog=TRACE
#与此相对，可以对一组mapper接口记录日志，只要对mapper接口所在的包开启日志功能即可：
#log4j.logger.org.mybatis.example=TRACE
#某些查询可能会返回大量的数据，只想记录其执行的SQL语句该怎么办？为此，Mybatis中SQL语 句的日志级别被设为DEBUG（JDK Logging中为FINE），结果日志的级别为TRACE（JDK Logging中为FINER)。所以，只要将日志级别调整为DEBUG即可达到目的： 
log4j.logger.com.avalon.ms.dao.mybatis.mapper=TRACE
# Console output...
log4j.appender.ServerDailyRollingFile=org.apache.log4j.DailyRollingFileAppender
log4j.appender.ServerDailyRollingFile.DatePattern='.'yyyy-MM-dd
log4j.appender.ServerDailyRollingFile.File=logs/notify-subscription.log
log4j.appender.ServerDailyRollingFile.layout=org.apache.log4j.PatternLayout
log4j.appender.ServerDailyRollingFile.layout.ConversionPattern=%d - %m%n
log4j.appender.ServerDailyRollingFile.Append=true

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n

log4j.appender.stu= org.apache.log4j.DailyRollingFileAppender
log4j.appender.stu.File =e:/logs/error.log
log4j.appender.stu.Append = true
#log4j.appender.stu.Threshold = info
log4j.appender.stu.layout = org.apache.log4j.PatternLayout
log4j.appender.stu.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n 




